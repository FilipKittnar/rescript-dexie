// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "@dusty-phillips/rescript-zora/src/Zora.mjs";
import * as Zora$1 from "zora";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as TestSetup$Dexie from "./TestSetup.mjs";

Zora$1.test("Table commands", (function (t) {
        t.test("Test basic methods", (function (t) {
                var dexie = TestSetup$Dexie.setup(undefined);
                var friends = Curry._1(TestSetup$Dexie.Friend.table, dexie);
                return TestSetup$Dexie.pt(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.pt(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(friends.add({
                                                                                                id: undefined,
                                                                                                name: "Chris",
                                                                                                color: "Purple"
                                                                                              }), (function (id) {
                                                                                              t.equal(id, 1, "Id should be 1");
                                                                                              return friends.get(1);
                                                                                            })), (function (result) {
                                                                                          Zora.optionSome(t, result, (function (t, friend) {
                                                                                                  t.equal(friend.name, "Chris", "Returned friend should have same name");
                                                                                                  t.equal(friend.color, "Purple", "Returned friend should have same color");
                                                                                                  
                                                                                                }));
                                                                                          return friends.get({
                                                                                                      name: "Chris"
                                                                                                    });
                                                                                        })), (function (result) {
                                                                                      Zora.optionSome(t, result, (function (t, friend) {
                                                                                              t.equal(friend.name, "Chris", "Returned friend should have same name");
                                                                                              t.equal(friend.color, "Purple", "Returned friend should have same color");
                                                                                              
                                                                                            }));
                                                                                      return friends.get(5);
                                                                                    })), (function (result) {
                                                                                  Zora.optionNone(t, result, "result should be none");
                                                                                  return friends.get({
                                                                                              name: "nobody"
                                                                                            });
                                                                                })), (function (result) {
                                                                              Zora.optionNone(t, result, "result should be none");
                                                                              friends.add({
                                                                                    id: undefined,
                                                                                    name: "Sam",
                                                                                    color: "Blue"
                                                                                  });
                                                                              return friends.put({
                                                                                          id: 3,
                                                                                          name: "Jess",
                                                                                          color: "Red"
                                                                                        });
                                                                            })), (function (id) {
                                                                          t.equal(id, 3, "Should have added a third friend");
                                                                          return friends.get(3);
                                                                        })), (function (result) {
                                                                      Zora.optionSome(t, result, (function (t, friend) {
                                                                              t.equal(friend.name, "Jess", "Name should be what was set");
                                                                              t.equal(friend.color, "Red", "Color should be what was set");
                                                                              
                                                                            }));
                                                                      return friends.put({
                                                                                  id: 3,
                                                                                  name: "Jess",
                                                                                  color: "Blue"
                                                                                });
                                                                    })), (function (id) {
                                                                  t.equal(id, 3, "Should have updated the third friend");
                                                                  return friends.get(3);
                                                                })), (function (result) {
                                                              Zora.optionSome(t, result, (function (t, friend) {
                                                                      t.equal(friend.name, "Jess", "Name should not have changed");
                                                                      t.equal(friend.color, "Blue", "Color should have changed");
                                                                      
                                                                    }));
                                                              return friends.delete(1);
                                                            })), (function (param) {
                                                          return friends.count();
                                                        })), (function (count) {
                                                      t.equal(count, 2, "Should now have two entries");
                                                      return friends.put({
                                                                  id: undefined,
                                                                  name: "Nora",
                                                                  color: "Red"
                                                                });
                                                    })), (function (id) {
                                                  t.equal(id, 4, "Should successfully add and increment id with put");
                                                  return friends.update(4, {
                                                              color: "Purple"
                                                            });
                                                })), (function (updated) {
                                              t.equal(updated, 1, "Should have updated one row");
                                              return friends.get(4);
                                            })), (function (result) {
                                          Zora.optionSome(t, result, (function (t, friend) {
                                                  t.equal(friend.color, "Purple", "Color should have changed");
                                                  
                                                }));
                                          return friends.where({
                                                      color: "Purple"
                                                    });
                                        })), (function (prim) {
                                      return prim.toArray();
                                    })), (function (result) {
                                  t.equal(result.length, 1, "Should be one #Purple person in array");
                                  return friends.where("name").equals("Jess").toArray();
                                })), (function (array) {
                              t.equal(array, [{
                                      id: 3,
                                      name: "Jess",
                                      color: "Blue"
                                    }], "Should have the one matching element");
                              
                            }));
              }));
        t.test("Test bulk methods", (function (t) {
                var dexie = TestSetup$Dexie.setup(undefined);
                var friends = Curry._1(TestSetup$Dexie.Friend.table, dexie);
                return TestSetup$Dexie.pt(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(TestSetup$Dexie.p(Curry._2(TestSetup$Dexie.Friend.bulkAdd, Curry._1(TestSetup$Dexie.Friend.table, dexie), [
                                                        {
                                                          id: undefined,
                                                          name: "Chris",
                                                          color: "Purple"
                                                        },
                                                        {
                                                          id: undefined,
                                                          name: "Samuel",
                                                          color: "Blue"
                                                        },
                                                        {
                                                          id: undefined,
                                                          name: "Samantha",
                                                          color: "Red"
                                                        }
                                                      ]), (function (ids) {
                                                      t.equal(ids.length, 3, "Should have added two ids");
                                                      return friends.count();
                                                    })), (function (count) {
                                                  t.equal(count, 3, "Should now have three entries");
                                                  return friends.bulkGet([
                                                              1,
                                                              2,
                                                              999
                                                            ]);
                                                })), (function (result) {
                                              t.equal(result.length, 3, "Should have retrieved two ids");
                                              Zora.optionSome(t, Caml_array.get(result, 0), (function (t, friend) {
                                                      t.equal(friend.name, "Chris", "First array result should be Chris");
                                                      
                                                    }));
                                              Zora.optionNone(t, Caml_array.get(result, 2), "Third result should be undefined");
                                              return friends.bulkDelete([
                                                          2,
                                                          3,
                                                          99
                                                        ]);
                                            })), (function (param) {
                                          return friends.count();
                                        })), (function (count) {
                                      t.equal(count, 1, "Should have deleted two of three entries");
                                      return Curry._2(TestSetup$Dexie.Friend.bulkPut, friends, [
                                                  {
                                                    id: 1,
                                                    name: "Jerome",
                                                    color: "Blue"
                                                  },
                                                  {
                                                    id: undefined,
                                                    name: "Kim",
                                                    color: "Purple"
                                                  },
                                                  {
                                                    id: 8,
                                                    name: "Tyrone",
                                                    color: "Blue"
                                                  }
                                                ]);
                                    })), (function (param) {
                                  return friends.count();
                                })), (function (count) {
                              t.equal(count, 3, "Should have replaced one and added two entries");
                              
                            }));
              }));
        return Zora.done(undefined);
      }));

export {
  
}
/*  Not a pure module */
