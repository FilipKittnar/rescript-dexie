// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "zora";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Where$Dexie from "../src/Where.mjs";
import * as TestSetup$Dexie from "./TestSetup.mjs";

Zora.test("Where clauses", (async function (t) {
        var dexie = TestSetup$Dexie.setup(undefined);
        await TestSetup$Dexie.friendFixture(dexie);
        var chris = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").equals("Chris").toArray();
        t.equal(chris, [{
                id: 1,
                name: "Chris",
                color: "Red"
              }], "should be Chris");
        var chris$1 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").equalsIgnoreCase("chris").toArray();
        t.equal(chris$1, [{
                id: 1,
                name: "Chris",
                color: "Red"
              }], "should be Chris");
        var items = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "id").above(5).toArray();
        t.equal(items, [
              {
                id: 6,
                name: "Rohan",
                color: "Red"
              },
              {
                id: 7,
                name: "Natalia",
                color: "Red"
              },
              {
                id: 8,
                name: "Padma",
                color: "Purple"
              }
            ], "Should have the last three items");
        var items$1 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "id").aboveOrEqual(6).toArray();
        t.equal(items$1, [
              {
                id: 6,
                name: "Rohan",
                color: "Red"
              },
              {
                id: 7,
                name: "Natalia",
                color: "Red"
              },
              {
                id: 8,
                name: "Padma",
                color: "Purple"
              }
            ], "Should have the last three items");
        var items$2 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "id").below(3).toArray();
        t.equal(items$2, [
              {
                id: 1,
                name: "Chris",
                color: "Red"
              },
              {
                id: 2,
                name: "Leroy",
                color: "Blue"
              }
            ], "Should have the first two items");
        var items$3 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "id").belowOrEqual(2).toArray();
        t.equal(items$3, [
              {
                id: 1,
                name: "Chris",
                color: "Red"
              },
              {
                id: 2,
                name: "Leroy",
                color: "Blue"
              }
            ], "Should have the first two items");
        var items$4 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").anyOf([
                "Leroy",
                "Rohan"
              ]).toArray();
        t.equal(items$4, [
              {
                id: 2,
                name: "Leroy",
                color: "Blue"
              },
              {
                id: 6,
                name: "Rohan",
                color: "Red"
              }
            ], "Should have the two selected items");
        var items$5 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").anyOfIgnoreCase([
                "leRoy",
                "roHan"
              ]).toArray();
        t.equal(items$5, [
              {
                id: 2,
                name: "Leroy",
                color: "Blue"
              },
              {
                id: 6,
                name: "Rohan",
                color: "Red"
              }
            ], "Should have the two selected items");
        var items$6 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").notEqual("Rohan").toArray();
        t.equal(items$6.length, 7, "should only contain 7 items");
        var items$7 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").noneOf([
                "Rohan",
                "Chris",
                "Natalia"
              ]).toArray();
        t.equal(items$7.length, 5, "should only contain 5 items");
        var items$8 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").startsWith("Le").toArray();
        t.equal(items$8, [{
                id: 2,
                name: "Leroy",
                color: "Blue"
              }], "Should start with Le");
        var items$9 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").startsWithAnyOf([
                "Le",
                "Na"
              ]).toArray();
        t.equal(items$9, [
              {
                id: 2,
                name: "Leroy",
                color: "Blue"
              },
              {
                id: 7,
                name: "Natalia",
                color: "Red"
              }
            ], "Should start with Le and Na");
        var items$10 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").startsWithIgnoreCase("le").toArray();
        t.equal(items$10, [{
                id: 2,
                name: "Leroy",
                color: "Blue"
              }], "Should start with Le");
        var items$11 = await Curry._2(TestSetup$Dexie.Friend.where, dexie, "name").startsWithAnyOfIgnoreCase([
                "le",
                "na"
              ]).toArray();
        t.equal(items$11, [
              {
                id: 2,
                name: "Leroy",
                color: "Blue"
              },
              {
                id: 7,
                name: "Natalia",
                color: "Red"
              }
            ], "Should start with le and na");
        var items$12 = await Where$Dexie.inAnyRange(Curry._2(TestSetup$Dexie.Friend.where, dexie, "name"), undefined, [[
                  "Le",
                  "Op"
                ]]).toArray();
        t.equal(items$12, [
              {
                id: 2,
                name: "Leroy",
                color: "Blue"
              },
              {
                id: 7,
                name: "Natalia",
                color: "Red"
              }
            ], "Should be in range");
        var items$13 = await Where$Dexie.inAnyRange(Curry._2(TestSetup$Dexie.Friend.where, dexie, "id"), {
                includeLowers: false,
                includeUppers: true
              }, [
                [
                  1,
                  4
                ],
                [
                  6,
                  7
                ]
              ]).toArray();
        t.equal(items$13, [
              {
                id: 2,
                name: "Leroy",
                color: "Blue"
              },
              {
                id: 3,
                name: "Jerome",
                color: "Purple"
              },
              {
                id: 4,
                name: "Betty",
                color: "Purple"
              },
              {
                id: 7,
                name: "Natalia",
                color: "Red"
              }
            ], "Should be in Range with options");
      }));

export {
  
}
/*  Not a pure module */
