// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "@dusty-phillips/rescript-zora/src/Zora.mjs";
import * as Zora$1 from "zora";
import * as Curry from "rescript/lib/es6/curry.js";
import * as TestSetup$Dexie from "./TestSetup.mjs";

Zora$1.test("Collection", (async function (t) {
        t.test("retreival functions", (async function (t) {
                var dexie = TestSetup$Dexie.setup(undefined);
                await TestSetup$Dexie.friendFixture(dexie);
                var collection = Curry._2(TestSetup$Dexie.Friend.findByCriteria, dexie, {
                      color: "Purple"
                    });
                t.test("count function", (async function (t) {
                        var count = await collection.clone().count();
                        t.equal(count, 3, "3 Purple Elements");
                      }));
                t.test("first function", (async function (t) {
                        var first = await collection.clone().first();
                        return Zora.optionSome(t, first, (function (t, friend) {
                                      t.equal(friend, {
                                            id: 3,
                                            name: "Jerome",
                                            color: "Purple"
                                          }, "First friend should be Betty");
                                    }));
                      }));
                t.test("toArray", (async function (t) {
                        var array = await collection.clone().toArray();
                        var expected = [
                          {
                            id: 3,
                            name: "Jerome",
                            color: "Purple"
                          },
                          {
                            id: 4,
                            name: "Betty",
                            color: "Purple"
                          },
                          {
                            id: 8,
                            name: "Padma",
                            color: "Purple"
                          }
                        ];
                        t.equal(array, expected, "Should have the three friends that chose purple");
                      }));
                t.test("each function", (async function (t) {
                        return await collection.clone().each(function (friend, param) {
                                    t.equal(friend.color, "Purple", "Each friend should choose purple");
                                  });
                      }));
                t.test("last function", (async function (t) {
                        var last = await collection.clone().last();
                        return Zora.optionSome(t, last, (function (t, friend) {
                                      t.equal(friend.name, "Padma", "Last friend should be Padma");
                                    }));
                      }));
                t.test("sortBy function", (async function (t) {
                        var array = await collection.clone().sortBy("name");
                        var expected = [
                          {
                            id: 4,
                            name: "Betty",
                            color: "Purple"
                          },
                          {
                            id: 3,
                            name: "Jerome",
                            color: "Purple"
                          },
                          {
                            id: 8,
                            name: "Padma",
                            color: "Purple"
                          }
                        ];
                        t.equal(array, expected, "Array should be sorted by name");
                      }));
              }));
        t.test("mutation functions", (async function (t) {
                t.test("delete function", (async function (t) {
                        var dexie = TestSetup$Dexie.setup(undefined);
                        await TestSetup$Dexie.friendFixture(dexie);
                        await Curry._2(TestSetup$Dexie.Friend.findByCriteria, dexie, {
                                color: "Purple"
                              }).delete();
                        var count = await Curry._1(TestSetup$Dexie.Friend.count, dexie);
                        t.equal(count, 5, "Should be down to 5 friends");
                      }));
              }));
        t.test("modify function", (async function (t) {
                var dexie = TestSetup$Dexie.setup(undefined);
                await TestSetup$Dexie.friendFixture(dexie);
                var num_changed = await Curry._2(TestSetup$Dexie.Friend.findByCriteria, dexie, {
                        color: "Purple"
                      }).modify({
                      color: "Blue"
                    });
                t.equal(num_changed, 3, "Should have changed all three items");
                var count = await Curry._2(TestSetup$Dexie.Friend.findByCriteria, dexie, {
                        color: "Blue"
                      }).count();
                t.equal(count, 5, "Should now have five frineds who chose blue");
                var count$1 = await Curry._2(TestSetup$Dexie.Friend.findByCriteria, dexie, {
                        color: "Purple"
                      }).count();
                t.equal(count$1, 0, "Should not be any friends who chose purple");
              }));
        t.test("Collection operation functions (they return self)", (async function (t) {
                var dexie = TestSetup$Dexie.setup(undefined);
                await TestSetup$Dexie.friendFixture(dexie);
                await Curry._2(TestSetup$Dexie.Friend.bulkPut, dexie, [
                      {
                        id: 9,
                        name: "Padma",
                        color: "Purple"
                      },
                      {
                        id: 10,
                        name: "Leroy",
                        color: "Blue"
                      }
                    ]);
                var collection = Curry._2(TestSetup$Dexie.Friend.findByCriteria, dexie, {
                      color: "Purple"
                    });
                t.test("Filter function", (async function (t) {
                        var array = await collection.clone().filter(function (f) {
                                return f.name !== "Padma";
                              }).toArray();
                        t.equal(array.length, 2, "Should only have two elements, the ones not named Padma");
                      }));
                t.test("Offset function", (async function (t) {
                        var array = await collection.clone().offset(2).toArray();
                        var expected = [
                          {
                            id: 8,
                            name: "Padma",
                            color: "Purple"
                          },
                          {
                            id: 9,
                            name: "Padma",
                            color: "Purple"
                          }
                        ];
                        t.equal(array, expected, "Should not have first three entries");
                      }));
                t.test("Limit function", (async function (t) {
                        var array = await collection.clone().limit(2).toArray();
                        var expected = [
                          {
                            id: 3,
                            name: "Jerome",
                            color: "Purple"
                          },
                          {
                            id: 4,
                            name: "Betty",
                            color: "Purple"
                          }
                        ];
                        t.equal(array, expected, "Should not have first three entries");
                      }));
                t.test("Until function", (async function (t) {
                        var array = await collection.clone().until(function (f) {
                                return f.name === "Padma";
                              }).toArray();
                        var expected = [
                          {
                            id: 3,
                            name: "Jerome",
                            color: "Purple"
                          },
                          {
                            id: 4,
                            name: "Betty",
                            color: "Purple"
                          }
                        ];
                        t.equal(array, expected, "Should not have first three entries");
                      }));
              }));
      }));

export {
  
}
/*  Not a pure module */
